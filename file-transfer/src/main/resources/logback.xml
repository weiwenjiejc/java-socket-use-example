<configuration scan="false" scanPeriod="10 seconds" debug="false">
    <!--
    scan,当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
    scanPeriod,设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟
    debug,当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false
    -->


    <!--
    控制台日志
    -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>　　　　　　　　
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>　　
        </encoder>
    </appender>


    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>testFile.log</file>
        <append>true</append>
        <!-- set immediateFlush to false for much higher logging throughput -->
        <immediateFlush>true</immediateFlush>
        <!-- encoders are assigned the type
             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>


    <!--
    RollingFileAppender,滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件
    -->
    <appender name="FILE_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">


        <file>msg.log</file>

        <!--滚动策略
        TimeBasedRollingPolicy，最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动
        SizeBasedTriggeringPolicy，
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--路径-->
            <fileNamePattern>log/msg.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>

        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>


    <!--
    org.example，把这个包下的日志都在这个logger处理
    additivity，是否向上级 logger 传递打印信息。默认是true
    -->
<!--    <logger name="org.example" level="debug" additivity="true">-->
<!--        <appender-ref ref="FILE_APPENDER"/>-->
<!--    </logger>-->


    <root level="debug">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE" />
        <appender-ref ref="FILE_APPENDER" />
    </root>


</configuration>